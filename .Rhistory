wtr_15$Simstrat$wtr_22 - wtr_15$Simstrat$wtr_2), 1, function(x) mean(x, na.rm = TRUE)),
'temp_2' = apply(cbind(wtr_2$GLM$wtr_22 - wtr_2$GLM$wtr_2,
wtr_2$GOTM$wtr_22 - wtr_2$GOTM$wtr_2,
wtr_2$Simstrat$wtr_22 - wtr_2$Simstrat$wtr_2), 1, function(x) mean(x, na.rm = TRUE)),
'temp_25' = apply(cbind(wtr_25$GLM$wtr_22 - wtr_25$GLM$wtr_2,
wtr_25$GOTM$wtr_22 - wtr_25$GOTM$wtr_2,
wtr_25$Simstrat$wtr_22 - wtr_25$Simstrat$wtr_2), 1, function(x) mean(x, na.rm = TRUE)),
'temp_3' = apply(cbind(wtr_3$GLM$wtr_22 - wtr_3$GLM$wtr_2,
wtr_3$GOTM$wtr_22 - wtr_3$GOTM$wtr_2,
wtr_3$Simstrat$wtr_22 - wtr_3$Simstrat$wtr_2), 1, function(x) mean(x, na.rm = TRUE)),
'temp_35' = apply(cbind(wtr_35$GLM$wtr_22 - wtr_35$GLM$wtr_2,
wtr_35$GOTM$wtr_22 - wtr_35$GOTM$wtr_2,
wtr_35$Simstrat$wtr_22 - wtr_35$Simstrat$wtr_2), 1, function(x) mean(x, na.rm = TRUE)),
'temp_4' = apply(cbind(wtr_4$GLM$wtr_22 - wtr_4$GLM$wtr_2,
wtr_4$GOTM$wtr_22 - wtr_4$GOTM$wtr_2,
wtr_4$Simstrat$wtr_22 - wtr_4$Simstrat$wtr_2), 1, function(x) mean(x, na.rm = TRUE)),
'temp_45' = apply(cbind(wtr_45$GLM$wtr_22 - wtr_45$GLM$wtr_2,
wtr_45$GOTM$wtr_22 - wtr_45$GOTM$wtr_2,
wtr_45$Simstrat$wtr_22 - wtr_45$Simstrat$wtr_2), 1, function(x) mean(x, na.rm = TRUE)),
'temp_5' = apply(cbind(wtr_5$GLM$wtr_22 - wtr_5$GLM$wtr_2,
wtr_5$GOTM$wtr_22 - wtr_5$GOTM$wtr_2,
wtr_5$Simstrat$wtr_22 - wtr_5$Simstrat$wtr_2), 1, function(x) mean(x, na.rm = TRUE)),
'temp_10' = apply(cbind(wtr_10$GLM$wtr_22 - wtr_10$GLM$wtr_2,
wtr_10$GOTM$wtr_22 - wtr_10$GOTM$wtr_2,
wtr_10$Simstrat$wtr_22 - wtr_10$Simstrat$wtr_2), 1, function(x) mean(x, na.rm = TRUE))
)
df_wtr2$id = lake.id
df_ice2<- data.frame('datetime' =  ice_null$GLM$time,
'ice_null' = apply(cbind(ice_null$GLM$ice_height,ice_null$GOTM$ice_height,ice_null$Simstrat$ice_height), 1, function(x) mean(x, na.rm = TRUE)),
'ice_01' = apply(cbind(ice_01$GLM$ice_height,ice_01$GOTM$ice_height,ice_01$Simstrat$ice_height), 1, function(x) mean(x, na.rm = TRUE)),
'ice_05' = apply(cbind(ice_05$GLM$ice_height,ice_05$GOTM$ice_height,ice_05$Simstrat$ice_height), 1, function(x) mean(x, na.rm = TRUE)),
'ice_1' = apply(cbind(ice_1$GLM$ice_height,ice_1$GOTM$ice_height,ice_1$Simstrat$ice_height), 1, function(x) mean(x, na.rm = TRUE)),
'ice_15' = apply(cbind(ice_15$GLM$ice_height,ice_15$GOTM$ice_height,ice_15$Simstrat$ice_height), 1, function(x) mean(x, na.rm = TRUE)),
'ice_2' = apply(cbind(ice_2$GLM$ice_height,ice_2$GOTM$ice_height,ice_2$Simstrat$ice_height), 1, function(x) mean(x, na.rm = TRUE)),
'ice_25' = apply(cbind(ice_25$GLM$ice_height,ice_25$GOTM$ice_height,ice_25$Simstrat$ice_height), 1, function(x) mean(x, na.rm = TRUE)),
'ice_3' = apply(cbind(ice_3$GLM$ice_height,ice_3$GOTM$ice_height,ice_3$Simstrat$ice_height), 1, function(x) mean(x, na.rm = TRUE)),
'ice_35' = apply(cbind(ice_35$GLM$ice_height,ice_35$GOTM$ice_height,ice_35$Simstrat$ice_height), 1, function(x) mean(x, na.rm = TRUE)),
'ice_4' = apply(cbind(ice_4$GLM$ice_height,ice_4$GOTM$ice_height,ice_4$Simstrat$ice_height), 1, function(x) mean(x, na.rm = TRUE)),
'ice_45' = apply(cbind(ice_45$GLM$ice_height,ice_45$GOTM$ice_height,ice_45$Simstrat$ice_height), 1, function(x) mean(x, na.rm = TRUE)),
'ice_5' = apply(cbind(ice_5$GLM$ice_height,ice_5$GOTM$ice_height,ice_5$Simstrat$ice_height), 1, function(x) mean(x, na.rm = TRUE)),
'ice_10' = apply(cbind(ice_10$GLM$ice_height,ice_10$GOTM$ice_height,ice_10$Simstrat$ice_height), 1, function(x) mean(x, na.rm = TRUE))
)
df_ice2$id = lake.id
df_ssi2 <- data.frame('datetime' = wtr_null$GLM$datetime,
'ssi_null' = apply(cbind(
lapply(wtr_null, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GLM$schmidt.stability,
lapply(wtr_null, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GOTM$schmidt.stability,
lapply(wtr_null, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$Simstrat$schmidt.stability),
1, function(x) mean(x, na.rm = TRUE)),
'ssi_01' = apply(cbind(
lapply(wtr_01, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GLM$schmidt.stability,
lapply(wtr_01, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GOTM$schmidt.stability,
lapply(wtr_01, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$Simstrat$schmidt.stability),
1, function(x) mean(x, na.rm = TRUE)),
'ssi_05' = apply(cbind(
lapply(wtr_05, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GLM$schmidt.stability,
lapply(wtr_05, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GOTM$schmidt.stability,
lapply(wtr_05, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$Simstrat$schmidt.stability),
1, function(x) mean(x, na.rm = TRUE)),
'ssi_1' =apply(cbind(
lapply(wtr_1, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GLM$schmidt.stability,
lapply(wtr_1, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GOTM$schmidt.stability,
lapply(wtr_1, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$Simstrat$schmidt.stability),
1, function(x) mean(x, na.rm = TRUE)),
'ssi_15' = apply(cbind(
lapply(wtr_15, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GLM$schmidt.stability,
lapply(wtr_15, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GOTM$schmidt.stability,
lapply(wtr_15, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$Simstrat$schmidt.stability),
1, function(x) mean(x, na.rm = TRUE)),
'ssi_2' = apply(cbind(
lapply(wtr_2, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GLM$schmidt.stability,
lapply(wtr_2, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GOTM$schmidt.stability,
lapply(wtr_2, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$Simstrat$schmidt.stability),
1, function(x) mean(x, na.rm = TRUE)),
'ssi_25' = apply(cbind(
lapply(wtr_25, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GLM$schmidt.stability,
lapply(wtr_25, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GOTM$schmidt.stability,
lapply(wtr_25, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$Simstrat$schmidt.stability),
1, function(x) mean(x, na.rm = TRUE)),
'ssi_3' = apply(cbind(
lapply(wtr_3, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GLM$schmidt.stability,
lapply(wtr_3, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GOTM$schmidt.stability,
lapply(wtr_3, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$Simstrat$schmidt.stability),
1, function(x) mean(x, na.rm = TRUE)),
'ssi_35' = apply(cbind(
lapply(wtr_35, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GLM$schmidt.stability,
lapply(wtr_35, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GOTM$schmidt.stability,
lapply(wtr_35, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$Simstrat$schmidt.stability),
1, function(x) mean(x, na.rm = TRUE)),
'ssi_4' = apply(cbind(
lapply(wtr_4, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GLM$schmidt.stability,
lapply(wtr_4, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GOTM$schmidt.stability,
lapply(wtr_4, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$Simstrat$schmidt.stability),
1, function(x) mean(x, na.rm = TRUE)),
'ssi_45' = apply(cbind(
lapply(wtr_45, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GLM$schmidt.stability,
lapply(wtr_45, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GOTM$schmidt.stability,
lapply(wtr_45, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$Simstrat$schmidt.stability),
1, function(x) mean(x, na.rm = TRUE)),
'ssi_5' = apply(cbind(
lapply(wtr_5, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GLM$schmidt.stability,
lapply(wtr_5, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GOTM$schmidt.stability,
lapply(wtr_5, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$Simstrat$schmidt.stability),
1, function(x) mean(x, na.rm = TRUE)),
'ssi_10' = apply(cbind(
lapply(wtr_10, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GLM$schmidt.stability,
lapply(wtr_10, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$GOTM$schmidt.stability,
lapply(wtr_10, function(x) {
ts.schmidt.stability(x, bathy = bathy, na.rm = TRUE)
})$Simstrat$schmidt.stability),
1, function(x) mean(x, na.rm = TRUE))
)
df_ssi2$id = lake.id
df = rbind(df, df2)
df_wtr = rbind(df_wtr, df_wtr2)
df_ssi = rbind(df_ssi, df_ssi2)
df_ice <- rbind(df_ice, df_ice2)
}
}
write.csv(x = df, file = 'output/density.csv', quote = F, row.names = F)
write.csv(x = df_wtr, file = 'output/density.csv', quote = F, row.names = F)
write.csv(x = df_ssi, file = 'output/density.csv', quote = F, row.names = F)
write.csv(x = df_ice, file = 'output/density.csv', quote = F, row.names = F)
write.csv(x = df, file = 'output/density.csv', quote = F, row.names = F)
write.csv(x = df_wtr, file = 'output/wtemp.csv', quote = F, row.names = F)
write.csv(x = df_ssi, file = 'output/ssi.csv', quote = F, row.names = F)
write.csv(x = df_ice, file = 'output/ice.csv', quote = F, row.names = F)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Load LakeEnsemblR
library(LakeEnsemblR)
# Load libraries for post-processing
library(lubridate)
library(gotmtools)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
library(colorspace)
df <- read.csv(x = df, file = 'output/density.csv', quote = F, row.names = F)
df_wtr <- read.csv(x = df_wtr, file = 'output/wtemp.csv', quote = F, row.names = F)
df_ssi <- read.csv(x = df_ssi, file = 'output/ssi.csv', quote = F, row.names = F)
df_ice <- read.csv(x = df_ice, file = 'output/ice.csv', quote = F, row.names = F)
df <- read.csv(x = df, file = 'output/density.csv', quote = F, row.names = F)
df <- read.csv('output/density.csv')
df_wtr <- read.csv('output/wtemp.csv')
df_ssi <- read.csv('output/ssi.csv')
df_ice <- read.csv('output/ice.csv')
col_blues <- colorRampPalette(c("gray",'cyan', "darkblue"))
m.df <- reshape2::melt(df, id = c('datetime', 'id'))
g <- ggplot(subset(m.df, datetime > '2013-12-30')) +
geom_line(aes(datetime, (value), col = variable)) +
ylab('Density differences top to bottom [g/kg]') +
xlab('') +
facet_wrap(~ id, ncol=1)+
scale_color_manual(values = col_blues(13))+
ylim(0,7.5)+
geom_hline(yintercept = 1.1, linetype = 'dashed') +
theme_minimal()+
theme(legend.position = 'bottom'); g
df
df <- read.csv('output/density.csv')
col_blues <- colorRampPalette(c("gray",'cyan', "darkblue"))
m.df <- reshape2::melt(df, id = c('datetime', 'id'))
g <- ggplot(subset(m.df, datetime > '2013-12-30')) +
geom_line(aes(datetime, (value), col = variable)) +
ylab('Density differences top to bottom [g/kg]') +
xlab('') +
facet_wrap(~ id, ncol=1)+
scale_color_manual(values = col_blues(13))+
ylim(0,7.5)+
geom_hline(yintercept = 1.1, linetype = 'dashed') +
theme_minimal()+
theme(legend.position = 'bottom'); g
g <- ggplot(m.df)+#subset(m.df, datetime > '2013-12-30')) +
geom_line(aes(datetime, (value), col = variable)) +
ylab('Density differences top to bottom [g/kg]') +
xlab('') +
facet_wrap(~ id, ncol=1)+
scale_color_manual(values = col_blues(13))+
ylim(0,7.5)+
geom_hline(yintercept = 1.1, linetype = 'dashed') +
theme_minimal()+
theme(legend.position = 'bottom'); g
str(df)
str(m.df)
df$datetime <- as.POSIXct(df$datetime)
m.df <- reshape2::melt(df, id = c('datetime', 'id'))
g <- ggplot(m.df)+#subset(m.df, datetime > '2013-12-30')) +
geom_line(aes(datetime, (value), col = variable)) +
ylab('Density differences top to bottom [g/kg]') +
xlab('') +
facet_wrap(~ id, ncol=1)+
scale_color_manual(values = col_blues(13))+
ylim(0,7.5)+
geom_hline(yintercept = 1.1, linetype = 'dashed') +
theme_minimal()+
theme(legend.position = 'bottom'); g
g <- ggplot(subset(m.df, datetime > '2013-12-30')) +
geom_line(aes(datetime, (value), col = variable)) +
ylab('Density differences top to bottom [g/kg]') +
xlab('') +
facet_wrap(~ id, ncol=1)+
scale_color_manual(values = col_blues(13))+
ylim(0,7.5)+
geom_hline(yintercept = 1.1, linetype = 'dashed') +
theme_minimal()+
theme(legend.position = 'bottom'); g
df <- read.csv('output/density.csv')
df_wtr <- read.csv('output/wtemp.csv')
df_ssi <- read.csv('output/ssi.csv')
df_ice <- read.csv('output/ice.csv')
df$datetime <- as.POSIXct(df$datetime)
df_wtr$datetime <- as.POSIXct(df_wtr$datetime)
df_ssi$datetime <- as.POSIXct(df_ssi$datetime)
df_ice$datetime <- as.POSIXct(df_ice$datetime)
col_blues <- colorRampPalette(c("gray",'cyan', "darkblue"))
m.df <- reshape2::melt(df, id = c('datetime', 'id'))
g <- ggplot(subset(m.df, datetime > '2013-12-30')) +
geom_line(aes(datetime, (value), col = variable)) +
ylab('Density differences top to bottom [g/kg]') +
xlab('') +
facet_wrap(~ id, ncol=1)+
scale_color_manual(values = col_blues(13))+
ylim(0,7.5)+
geom_hline(yintercept = 1.1, linetype = 'dashed') +
theme_minimal()+
theme(legend.position = 'bottom'); g
ggsave('figs/densitydiff.png', g,  dpi = 300,width = 250,height = 200, units = 'mm')
m.df_ice <- reshape2::melt(df_ice, id = c('datetime', 'id'))
g <- ggplot(subset(m.df_ice, datetime > '2013-12-30')) +
geom_line(aes(datetime, (value), col = variable)) +
ylab('Ice height [m]') +
xlab('') +
facet_wrap(~ id, ncol=1)+scale_color_manual(values = col_blues(13))+
# ylim(0,7.5)+
# geom_hline(yintercept = 1.1, linetype = 'dashed') +
theme_minimal()+
theme(legend.position = 'bottom'); g
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Load LakeEnsemblR
library(LakeEnsemblR)
# Load libraries for post-processing
library(lubridate)
library(gotmtools)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
library(colorspace)
df <- read.csv('output/density.csv')
df_wtr <- read.csv('output/wtemp.csv')
df_ssi <- read.csv('output/ssi.csv')
df_ice <- read.csv('output/ice.csv')
df$datetime <- as.POSIXct(df$datetime)
df_wtr$datetime <- as.POSIXct(df_wtr$datetime)
df_ssi$datetime <- as.POSIXct(df_ssi$datetime)
df_ice$datetime <- as.POSIXct(df_ice$datetime)
col_blues <- colorRampPalette(c("gray",'cyan', "darkblue"))
m.df <- reshape2::melt(df, id = c('datetime', 'id'))
g <- ggplot(subset(m.df, datetime > '2013-12-30')) +
geom_line(aes(datetime, (value), col = variable)) +
ylab('Density differences top to bottom [g/kg]') +
xlab('') +
facet_wrap(~ id, ncol=1)+
scale_color_manual(values = col_blues(13))+
ylim(0,7.5)+
geom_hline(yintercept = 1.1, linetype = 'dashed') +
theme_minimal()+
theme(legend.position = 'bottom'); g
ggsave('figs/densitydiff.png', g,  dpi = 300,width = 250,height = 200, units = 'mm')
m.df_ice <- reshape2::melt(df_ice, id = c('datetime', 'id'))
g <- ggplot(subset(m.df_ice, datetime > '2013-12-30')) +
geom_line(aes(datetime, (value), col = variable)) +
ylab('Ice height [m]') +
xlab('') +
facet_wrap(~ id, ncol=1)+scale_color_manual(values = col_blues(13))+
# ylim(0,7.5)+
# geom_hline(yintercept = 1.1, linetype = 'dashed') +
theme_minimal()+
theme(legend.position = 'bottom'); g
ggsave('figs/ice.png', g,  dpi = 300,width = 250,height = 200, units = 'mm')
df_ssi_scaled = df_ssi
df_ssi_scaled[,2:(ncol(df_ssi)-1)] <- apply(as.matrix(df_ssi[,2:(ncol(df_ssi)-1)] ), 2, function(x) x-as.matrix(df_ssi[,2:(ncol(df_ssi)-1)] )[,1])
m.df_ssi_scaled <- reshape2::melt(df_ssi_scaled, id = c('datetime', 'id'))
g <- ggplot(m.df_ssi_scaled) +
geom_line(aes(datetime, (value), col = variable)) +
ylab('SSI normalized on null [J/m2]') +
xlab('') +
ylim(-70,300)+
facet_wrap(~ id, ncol =1)+
scale_color_manual(values = col_blues(13))+
theme_minimal()+
theme(legend.position = 'bottom'); g
ggsave('figs/schmidtensemble.png', g,  dpi = 300,width = 250,height = 200, units = 'mm')
df.count <- df
for (j in 2:(ncol(df.count)-1)){
df.count[,j] <- ifelse(df.count[,j] <= 0.1, 1, 0)
}
for (j in 2:(ncol(df.count)-1)){
idx = which(df.count$id == 'mendota')
df.count[idx,j] <- cumsum(df.count[idx,j])
idy = which(df.count$id == 'monona')
df.count[idy,j] <- cumsum(df.count[idy,j])
}
df.count <- reshape2::melt(df.count, id = c('datetime', 'id'))
g <- ggplot(df.count) +
geom_line(aes(datetime, (value), col = variable)) +
ylab('Cum. amount of mixed days, density diff <= 0.1 [d]') +
xlab('') +
facet_wrap(~ id)+
scale_color_manual(values = col_blues(13))+
theme_minimal()+
theme(legend.position = 'bottom'); g
ggsave('figs/cumMixedDays.png', g,  dpi = 300,width = 250,height = 150, units = 'mm')
matrix.mixedDated <- matrix(NA, ncol = 13, nrow = length(unique(year(df$datetime))))
matrix.mixedDated2 <- matrix(NA, ncol = 13, nrow = length(unique(year(df$datetime))))
for (j in 2:(ncol(df)-1)){
for (i in unique(year(df$datetime))){
idx = which(df$id == 'mendota')
# data = df[which(year(df$datetime[idx]) == i), j]
data = df[na.omit(idx[which(year(df$datetime) == i)]), j]
# na.omit(idx[which(year(df$datetime) == i)])
wtr = df_wtr[na.omit(idx[which(year(df$datetime) == i)]), j]
ice = df_ice[na.omit(idx[which(year(df$datetime) == i)]), j]
time = df[na.omit(idx[which(year(df$datetime) == i)]), 1]
# idz <- which(data <= 1e-2 & abs(wtr) <= 1e-1)
idz <- which(data <= 1e-1 & abs(wtr) <= 1 & ice == 0)
matrix.mixedDated[match(i,  unique(year(df$datetime[idx]))), j-1] <- yday(time[min(idz)])
idy = which(df$id == 'monona')
# data = df[which(year(df$datetime) == i), j]
data = df[na.omit(idy[which(year(df$datetime) == i)]), j]
wtr = df_wtr[na.omit(idy[which(year(df$datetime) == i)]), j]
ice = df_ice[na.omit(idy[which(year(df$datetime) == i)]), j]
time = df[na.omit(idy[which(year(df$datetime) == i)]), 1]
# idz <- which(data <= 1e-2 & abs(wtr) <= 1e-1)
idz <- which(data <= 1e-1 & abs(wtr) <= 1 & ice == 0)
matrix.mixedDated2[match(i,  unique(year(df$datetime[idy]))), j-1] <- yday(time[min(idz)])
}
}
df.mixedDated2 <- data.frame(rbind(matrix.mixedDated, matrix.mixedDated2))
colnames(df.mixedDated2) <- c('null','01','05','1','1.5','2','2.5','3','3.5','4','4.5','5','10')
# matrix.mixedDated <- apply(matrix.mixedDated, 2, function(x) x-matrix.mixedDated[,1])
# matrix.mixedDated2 <- apply(matrix.mixedDated2, 2, function(x) x-matrix.mixedDated2[,1])
df.mixedDated2$year <- unique(year(df$datetime))
df.mixedDated2$id = c(rep('mendota', length(unique(year(df$datetime)))), rep('monona',length(unique(year(df$datetime)))))
df.mixedDated <- data.frame(rbind(matrix.mixedDated, matrix.mixedDated2))
colnames(df.mixedDated) <- c('null','01','05','1','1.5','2','2.5','3','3.5','4','4.5','5','10')
df.mixedDated$id = c(rep('mendota', length(unique(year(df$datetime)))), rep('monona',length(unique(year(df$datetime)))))
df.mixedDated$year <- unique(year(df$datetime))
m.df.mixedDated <- reshape2::melt(df.mixedDated, id = c('year','id'))
g <- ggplot(m.df.mixedDated, aes(year, value, col = variable)) +
geom_line() + geom_point() +
ylab('First mixing day of the year') + xlab('') +
# geom_text(data = df.mixedDated2, aes(year, null, label = (null)))+
facet_wrap(~ id)+
scale_color_manual(values = col_blues(13))+
theme_minimal()+
theme(legend.position = 'bottom'); g
ggsave('figs/firstMixingdays.png', g,  dpi = 300,width = 250,height = 150, units = 'mm')
library("scatterplot3d")
scatterplot3d(x = m.df.mixedDated$year, y= m.df.mixedDated$variable, z= m.df.mixedDated$value,
# color = col_vector[1:n],
type = 'p')
time = rep(seq(1,12,1),5)
time = c('Jan', 'Feb', "Mar", 'Apr', "May","May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov",'Nov', "Dec")
scenario = ifelse(time %in% c(12,1,2,3,4), 1, 0.1)
scenario = ifelse(time %in% c('Dec',"Jan",'Feb',"Mar","Apr"), 1, 0.1)
scenario = c(1, 1, 1, 1, 1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 1,1)
df.frame = data.frame('time' = factor(time, levels = unique(time)), 'data' = scenario)
g1 = ggplot(df.frame) +
geom_line( aes(time, data, group =  'Scenario' )) +
geom_line( aes(time, data * 0, group =  'Null' ), linetype = 'dashed') +
geom_line( aes(time, data * 0 + 0.1, group =  'Background' ), linetype = 'dashed') +
geom_text(x = 2.25, y = 0.05, label = 'Null') +
geom_text(x = 2.70, y = 0.15, label = 'Background') +
geom_text(x = 2.5, y = 0.95, label = 'Scenario') +
ylab('Salt load (g/kg)') +
xlab('') +
ylim(0,1.0) +
theme_minimal() +
theme(axis.text.y =element_blank(), axis.ticks.y = element_blank()); g1
ggsave('figs/Approach.png', g1,  dpi = 300,width = 200,height = 100, units = 'mm')
g <- ggplot(subset(df_ssi datetime > '2013-12-30')) +
geom_line(aes(datetime, (value), col = variable)) +
ylab('SSI normalized on null [J/m2]') +
xlab('') +
ylim(-70,300)+
facet_wrap(~ id, ncol =1)+
scale_color_manual(values = col_blues(13))+
theme_minimal()+
theme(legend.position = 'bottom'); g
g <- ggplot(subset(df_ssi, datetime > '2013-12-30')) +
geom_line(aes(datetime, (value), col = variable)) +
ylab('SSI normalized on null [J/m2]') +
xlab('') +
ylim(-70,300)+
facet_wrap(~ id, ncol =1)+
scale_color_manual(values = col_blues(13))+
theme_minimal()+
theme(legend.position = 'bottom'); g
m.df_ssi <- reshape2::melt(df_ssi, id = c('datetime', 'id'))
g <- ggplot(subset(m.df_ssi, datetime > '2013-12-30')) +
geom_line(aes(datetime, (value), col = variable)) +
ylab('SSI normalized on null [J/m2]') +
xlab('') +
ylim(-70,300)+
facet_wrap(~ id, ncol =1)+
scale_color_manual(values = col_blues(13))+
theme_minimal()+
theme(legend.position = 'bottom'); g
g <- ggplot(subset(m.df_ssi, datetime > '2013-12-30')) +
geom_line(aes(datetime, (value), col = variable)) +
ylab('SSI normalized on null [J/m2]') +
xlab('') +
ylim(-70,1500)+
facet_wrap(~ id, ncol =1)+
scale_color_manual(values = col_blues(13))+
theme_minimal()+
theme(legend.position = 'bottom'); g
g <- ggplot(subset(m.df_ssi, datetime > '2013-12-30')) +
geom_line(aes(datetime, (value), col = variable)) +
ylab('SSI normalized on null [J/m2]') +
xlab('') +
ylim(-70,1000)+
facet_wrap(~ id, ncol =1)+
scale_color_manual(values = col_blues(13))+
theme_minimal()+
theme(legend.position = 'bottom'); g
g <- ggplot(subset(m.df_ssi, datetime > '2013-12-30')) +
geom_line(aes(datetime, (value), col = variable)) +
ylab('SSI normalized on null [J/m2]') +
xlab('') +
ylim(-70,900)+
facet_wrap(~ id, ncol =1)+
scale_color_manual(values = col_blues(13))+
theme_minimal()+
theme(legend.position = 'bottom'); g
ggsave('figs/schmidtensemble.png', g,  dpi = 300,width = 250,height = 200, units = 'mm')
